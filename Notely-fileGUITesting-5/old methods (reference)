    public void createNotecard(ActionEvent event) throws IOException {
        System.out.println(termInput.getText()); //Testing
        System.out.println(definitionInput.getText()); //Testing

        term = termInput.getText();
        definition = definitionInput.getText();
        studySet = titleInput.getText();


        System.out.println(studySet); //Testing

        createSet(studySet, folderNameInput.getText());

        NoteCard nc = new NoteCard(term, definition, 0, 0);
        nc.writeQuestion(studySet, term, definition);

        Label termLabel = new Label(this.term);
        Label defLabel = new Label(this.definition);
        AnchorPane notecardPane = new AnchorPane(termLabel, defLabel);
        notecardPane.setPrefHeight(termLabel.getHeight() + defLabel.getHeight() + 20); // Add some padding
        termList.getChildren().add(notecardPane);
        // Position the notecard below the previously added notecard, if any
        double y = 0;
        if (termList.getChildren().size() > 1) {
            for (Node node : termList.getChildren()) {
                if (node instanceof AnchorPane) {
                    AnchorPane previousNotecard = (AnchorPane) node;
                    y += previousNotecard.getHeight();
                }
            }
            y += 10; // Add some padding
        }
        notecardPane.setLayoutX(0);
        notecardPane.setLayoutY(y);
        // Position the definition label below the term label
        defLabel.setLayoutY(termLabel.getHeight() + termLabel.getPadding().getTop() + 10); // Add some padding
    }

    import java.util.*;
    import java.io.*;

    public class fileRead {

        //Check if empty
        public static void readFromNotecard (String notecardName, boolean randomize) {
            String temp;
            ArrayList<String> questions = new ArrayList<>();
            ArrayList<String> answers = new ArrayList<>();
            temp = "src/Notecard/" + notecardName + ".txt";
            try {
                FileInputStream file = new FileInputStream(temp);
                Scanner scanner = new Scanner(file);
                while (scanner.hasNextLine()) {
                    questions.add(scanner.nextLine());
                    if (scanner.hasNextLine())
                        answers.add(scanner.nextLine());
                }
                if (questions.size() == 0) {
                    System.out.println ("No notes found");
                    return;
                }
                System.out.println ();
                if (!randomize)
                    readFromList(questions, answers);
                else
                    randomlyReadFromList(questions, answers);
                file.close();
            } catch (FileNotFoundException e1) {
                System.out.println("Notecard does not exist");
            } catch (IOException e2) {
                e2.printStackTrace();
            }
        }

        public static void readFromList (ArrayList<String> questions, ArrayList<String> answers) {
            for (int i = 0; i < questions.size(); i++) {
                System.out.println(questions.get(i));
                System.out.println(answers.get(i));
            }
        }

        public static void randomlyReadFromList(ArrayList<String> questions, ArrayList<String> answers) {
            ArrayList<Integer> indices = new ArrayList<>();
            for (int i = 0; i < questions.size(); i++)
                indices.add(i);
            Collections.shuffle(indices);
            for (int i = 0; i < indices.size(); i++) {
                System.out.println(questions.get(indices.get(i)));
                System.out.println(answers.get(indices.get(i)));
            }
        }

    }
    import java.io.*;
    import java.util.ArrayList;
    import java.util.Scanner;

    public class fileWrite {

        public static void createNotecard (String title) {
            String fileName = "src/Notecard/" + title + ".txt";
            try {
                File file = new File(fileName);
                if (file.createNewFile())
                    System.out.printf("\nNotecard created with title \"%s\"\n", title);
                else
                    System.out.println("\nNotecard already exists");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }


        public static void deleteQuestion (String title) {
            String fileName = "src/Notecard/" + title + ".txt";
            Scanner scanner = new Scanner(System.in);
            try {

                FileInputStream fileReading = new FileInputStream (fileName);
                Scanner reader = new Scanner(fileReading);
                ArrayList<String> data = new ArrayList<>();
                while (reader.hasNextLine())
                    data.add(reader.nextLine());
                reader.close();

                if (data.size() == 0) {
                    System.out.println ("\nNo notes found to delete.");
                    return;
                }

                FileOutputStream fileWriting = new FileOutputStream(fileName);
                PrintWriter writer = new PrintWriter(fileWriting, true);

                int input = -999;
                System.out.print("\nEnter question number: ");
                input = scanner.nextInt();
                while (!(input >= 1 && input <= (data.size()/2))) {
                    System.out.print ("Please enter a valid number.");
                    System.out.println("\nEnter question number: ");
                    input = scanner.nextInt();
                }
                for (int i = 0; i < data.size(); i++) {
                    if (i != (2 * input - 2) && i != (2 * input - 1))
                        writer.write(data.get(i) + "\n");
                }
                writer.close();

            } catch (FileNotFoundException e1) {
                System.out.printf ("\nNotecard with title \"%s\" does not exist.\n", title);
                System.out.print ("Would you like to create a notecard first? y/n: ");
                String createAnswer = scanner.nextLine();
                if (createAnswer.equals("y") || createAnswer.equals("Y")) {
                    createNotecard(title);
                    writeQuestion(title);
                }
                else {
                    System.out.println ("Exiting function!");
                }
            } catch (IOException e2) {
                e2.printStackTrace();
            }
        }

    }

    public void writeQuestion (String title, String term, String definition) {
            String fileName = "Notely/src/main/java/notely/app/Notecard/" + title + ".txt";

            if (!fileName.equals("Notely/src/main/java/notely/app/Notecard/.txt")) {
                Scanner scanner = new Scanner(System.in);
                try {

                    FileInputStream fileReading = new FileInputStream(fileName);
                    Scanner reader = new Scanner(fileReading);
                    ArrayList<String> data = new ArrayList<>();
                    while (reader.hasNextLine())
                        data.add(reader.nextLine());
                    reader.close();

                    FileOutputStream fileWriting = new FileOutputStream(fileName);
                    PrintWriter writer = new PrintWriter(fileWriting, true);

                    data.add(term + "@" + definition);

                    for (int i = 0; i < data.size(); i++)
                        writer.write(data.get(i) + "\n");
                    writer.close();

                } catch (FileNotFoundException e1) {
                    System.out.printf("\nSet with title \"%s\" does not exist.\n", title);
                    System.out.println("Exiting function!");
                } catch (IOException e2) {
                    e2.printStackTrace();
                }
            }
        }

